#include <Stepper.h>

const int stepsPerRevolution = 800;

// ステッピングモーター
const int motorPin1 = 29;
const int motorPin2 = 26;
const int motorPin3 = 27;
const int motorPin4 = 28;

// DCモーター(仮)
const int DCMotorPin1 = 9;
const int DCMotorPin2 = 10;
const int enablePin = 3;

// 超音波センサー
#define echoPin1 23 // 前方センサー
#define trigPin1 22
#define echoPin2 31 // 後方センサー
#define trigPin2 30

// タイヤ
#define R_DIN0 44 // R 黄黒
#define R_DIN1 43 // R オレンジ白
#define R_DIN2 42 // R 赤白
#define R_VMana 45 // R 紫
#define L_DIN0 36 // L 黄黒
#define L_DIN1 35 // L オレンジ白
#define L_DIN2 34 // L 赤白
#define L_VMana 37 // L 紫

int maximumRange = 300;
int minimumRange = 0;
long duration1, distance1;
long duration2, distance2;
int triger_count1 = 0;
int pw = 255;
bool spinning = false; 
bool initialInputReceived = false; 

Stepper myStepper(stepsPerRevolution, motorPin1, motorPin2, motorPin3, motorPin4);

void setup() {
  myStepper.setSpeed(60);
  Serial.begin(9600);

  // 超音波
  pinMode(trigPin1, OUTPUT);
  pinMode(echoPin1, INPUT);
  pinMode(trigPin2, OUTPUT);
  pinMode(echoPin2, INPUT);

  // タイヤ
  pinMode(R_DIN0, OUTPUT);
  pinMode(R_DIN1, OUTPUT);
  pinMode(R_DIN2, OUTPUT);
  pinMode(R_VMana, OUTPUT);
  digitalWrite(R_DIN0, HIGH);
  digitalWrite(R_DIN1, HIGH);
  digitalWrite(R_DIN2, HIGH);

  pinMode(L_DIN0, OUTPUT);
  pinMode(L_DIN1, OUTPUT);
  pinMode(L_DIN2, OUTPUT);
  pinMode(L_VMana, OUTPUT);
  digitalWrite(L_DIN0, HIGH);
  digitalWrite(L_DIN1, HIGH);
  digitalWrite(L_DIN2, LOW);

  // DCモーター
  pinMode(DCMotorPin1, OUTPUT);
  pinMode(DCMotorPin2, OUTPUT);
  pinMode(enablePin, OUTPUT);
}

void loop() {
 
  if (!initialInputReceived && Serial.available()) {
    initialInputReceived = true;
    Serial.println("初期入力が検出されました。");
    return;
  }
  
  if (initialInputReceived && !spinning && Serial.available()) {
    spinning = true;
    digitalWrite(R_DIN0, LOW);
    digitalWrite(R_DIN1, LOW);
    analogWrite(R_VMana, pw);

    digitalWrite(L_DIN0, LOW);
    digitalWrite(L_DIN1, LOW);
    analogWrite(L_VMana, pw);

    Serial.println("SPINNING!");
  }

  if (spinning) {
    // 前方の超音波センサーで距離を測定
    digitalWrite(trigPin1, LOW);
    delayMicroseconds(2);
    digitalWrite(trigPin1, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin1, LOW);
    duration1 = pulseIn(echoPin1, HIGH);
    distance1 = duration1 / 58.2;

    digitalWrite(trigPin2, LOW);
    delayMicroseconds(2);
    digitalWrite(trigPin2, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin2, LOW);
    duration2 = pulseIn(echoPin2, HIGH);
    distance2 = duration2 / 58.2;

    // 後方センサーの距離を確認
    if (distance2 > 0 && distance2 < 10) { 
      Serial.println("後方センサーが反応しました。モーターを停止します。");
      digitalWrite(R_DIN0, LOW);
      digitalWrite(R_DIN1, LOW);
      digitalWrite(R_DIN2, LOW);
      analogWrite(R_VMana, 0);

      digitalWrite(L_DIN0, LOW);
      digitalWrite(L_DIN1, LOW);
      digitalWrite(L_DIN2, HIGH);
      analogWrite(L_VMana, 0);

      // DCモ-ターを上に動かす
      digitalWrite(DCMotorPin1, HIGH);
      digitalWrite(DCMotorPin2, HIGH);
      delay(1000);

      return; 
    }

    // タイヤの動作を続ける
    if (distance1 >= 10 && distance1 <= 30) {
      triger_count1++;
      delay(1000);
    } else if (distance1 > 0 && distance1 < 5.0) {
      myStepper.step(-stepsPerRevolution);
      delay(1000);
    }

    if (triger_count1 == 3) {
      digitalWrite(R_DIN0, LOW);
      digitalWrite(R_DIN1, LOW);
      digitalWrite(R_DIN2, LOW);
      analogWrite(R_VMana, 0);

      digitalWrite(L_DIN0, LOW);
      digitalWrite(L_DIN1, LOW);
      digitalWrite(L_DIN2, HIGH);
      analogWrite(L_VMana, 0);

      // ステッピングモーター
      myStepper.step(stepsPerRevolution);
      delay(1000);
      triger_count1 = 0;
      spinning = false;

      // DCモーターを動かす
      digitalWrite(DCMotorPin1, HIGH);
      digitalWrite(DCMotorPin2, HIGH);
      delay(1500);
    }

    // 前方センサーの距離を表示
    if (distance1 >= maximumRange || distance1 <= minimumRange) {
      Serial.println("Sensor 1: -1");
    } else {
      Serial.print("Sensor 1: ");
      Serial.print(distance1);
      Serial.println(" cm");
    }
  }

  delay(100);
}
